import { Component, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { NgForm } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { ActivatedRoute, Router } from '@angular/router';

import { Products } from '../../../models/products';
import { productService } from '../../../services/product.service';
import { AlertService } from '../../../services/alert.service';

@Component({
  selector: 'app-addproduct',
  imports: [FormsModule, CommonModule],
  templateUrl: './addproduct.component.html',
  styleUrl: './addproduct.component.scss',
})
export class AddproductComponent implements OnInit, OnChanges {
  // Define model properties for product inputs
  id: number = 0;
  productName: string = '';
  productFee: number = 0.0;
  productDescription: string = '';
  image: string = '';
  imageUrl: string = '';

  // Array to hold all the products
  productList: Products[] = [];
  constructor(
    private router: Router,
    private route: ActivatedRoute,
    private productService: productService,
    private alertService: AlertService
  ) {}

  ngOnInit(): void {
    const productId = this.route.snapshot.paramMap.get('id');
    if (productId) {
      this.productService.getProductById(+productId).subscribe({
        next: (product) => {
          this.id = product.id;
          this.productName = product.name;
          this.productDescription = product.description;
          this.productFee = product.price;
          this.image = product.image;
        },
        error: (error) => {
          console.error('Error fetching product details:', error);
          alert('Failed to fetch product details.');
        },
      });
    }
  }

  ngOnChanges(changes: SimpleChanges): void {
    const productId = this.route.snapshot.paramMap.get('id');
    if (productId) {
      this.productService.getProductById(+productId).subscribe({
        next: (product) => {
          this.id = product.id;
          this.productName = product.name;
          this.productDescription = product.description;
          this.productFee = product.price;
          this.image = product.image;
        },
        error: (error) => {
          console.error('Error fetching product details:', error);
          alert('Failed to fetch product details.');
        },
      });
    }
  }

  createProduct(productForm: NgForm): void {
    if (productForm.valid) {
      // Create a new Product instance
      const newProduct: Products = {
        id: this.id, // ID will be generated by the backend or API
        name: this.productName,
        description: this.productDescription,
        price: this.productFee,
        image: this.image || 'default-image.jpg', // Fallback to default image if not provided
        imageUrl: this.imageUrl,
      };
      if (productForm.valid && this.id === 0) {
        // Call the productService to add the new product
        this.productService.addProduct(newProduct).subscribe({
          next: (response) => {
            console.log('Product Created:', response);
            this.alertService.showAlert(
              'Product Created',
              'alert-success',
              true
            );
            this.goBack();
          },
          error: (error) => {
            console.error('Error creating product:', error);
            alert('Failed to create product. Please try again.');
          },
        });
      } else {
        this.productService.updateProduct(newProduct).subscribe({
          next: (response) => {
            this.alertService.showAlert(
              'Product Updated',
              'alert-success',
              true
            );
            this.goBack();
          },
          error: (error) => {
            console.error('Error creating product:', error);
            this.alertService.showAlert(
              'Failed to create product. Please try again.',
              'alert-error',
              true
            );
          },
        });
      }
    } else {
      this.alertService.showAlert('Invalid Transaction', 'alert-error', true);
    }
  }

  goBack() {
    this.router.navigate(['/products']);
  }
}
